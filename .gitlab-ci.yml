# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Gradle.gitlab-ci.yml

# This is the Gradle build system for JVM applications
# https://gradle.org/
# https://github.com/gradle/gradle

image: gradle:8.6-jdk21
stages:
  - build
  - native
  - docker
  - test

before_script:
  - GRADLE_USER_HOME="$(pwd)/.gradle"
  - export GRADLE_USER_HOME

build:
  stage: build
  script: gradle --build-cache shadowJar
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  artifacts:
    paths:
      - "build/libs/atc-all.jar"
    untracked: false
    when: on_success
    expire_in: 30 days

native:
  image: registry.gitlab.com/smoke_labs/graalvm-gradle-image
  stage: native
  script: gradle --build-cache nativeCompile
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  needs:
    - "build"
  artifacts:
    paths:
      - "build/native/nativeCompile/atc"
    untracked: false
    when: on_success
    expire_in: 30 days

docker_image:
  # Use the official docker image.
  image: docker:cli
  stage: docker
  services:
    - docker:dind
  needs:
    - "build"
  variables:
    DOCKER_IMAGE_NAME: atc:$CI_COMMIT_SHA
  cache:
    key: "$CI_COMMIT_REF_NAME"
    policy: push
    paths:
      - build
      - .gradle
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  # All branches are tagged with $DOCKER_IMAGE_NAME (defaults to commit ref slug)
  # Default branch is also tagged with `latest`
  script:
    - docker build --pull -t "$DOCKER_IMAGE_NAME" .
    - docker push "$DOCKER_IMAGE_NAME"
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        docker tag "$DOCKER_IMAGE_NAME" "$CI_REGISTRY_IMAGE:latest"
        docker push "$CI_REGISTRY_IMAGE:latest"
      fi
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - dockerfile

  

include:
  - template: Jobs/SAST.gitlab-ci.yml

# test:
#   stage: test
#   script: gradle check
#   cache:
#     key: "$CI_COMMIT_REF_NAME"
#     policy: pull
#     paths:
#       - build
#       - .gradle

